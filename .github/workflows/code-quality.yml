name: Code Quality and Linting

on:
  push:
    branches: [ "master", "main", "develop" ]
  pull_request:
    branches: [ "master", "main", "develop" ]

# Ensure only one code quality workflow runs per branch at a time
concurrency:
  group: code-quality-${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  # Go linting and formatting
  go-quality:
    name: Go Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.25.1'
        cache: true
        cache-dependency-path: setagaya/go.sum

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v7
      with:
        version: v2.4.0
        working-directory: setagaya
        skip-cache: true
        args: --enable-only=errcheck,govet,staticcheck,ineffassign,unused --timeout=10m

  # Kubernetes manifest validation and compatibility testing
  kubernetes-compatibility:
    name: Kubernetes Compatibility (K8s ${{ matrix.kubernetes-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kubernetes-version: ['1.21.0', '1.25.0', '1.28.0', '1.34.0']
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install kubeconform
      run: |
        echo "📦 Installing kubeconform for Kubernetes validation..."
        curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz
        sudo mv kubeconform /usr/local/bin
        kubeconform -v

    - name: Validate Core Kubernetes Manifests
      run: |
        echo "🔍 Validating core Kubernetes manifests for version ${{ matrix.kubernetes-version }}"
        echo "Files to validate:"
        find kubernetes/ -name "*.yaml" -o -name "*.yml" | sort

        # Validate with detailed output
        if kubeconform -summary -verbose -kubernetes-version ${{ matrix.kubernetes-version }} kubernetes/; then
          echo "✅ Core manifests are compatible with Kubernetes ${{ matrix.kubernetes-version }}"
        else
          echo "❌ Core manifests have compatibility issues with Kubernetes ${{ matrix.kubernetes-version }}"
          exit 1
        fi

    - name: Validate Helm Templates (Best Effort)
      continue-on-error: true
      run: |
        echo "🎯 Validating Helm templates for version ${{ matrix.kubernetes-version }}"
        echo "Note: Some validation errors are expected for Helm templates due to templating syntax"

        # Validate Helm templates with detailed output
        kubeconform -summary -verbose -kubernetes-version ${{ matrix.kubernetes-version }} setagaya/install/setagaya/templates/ || {
          echo "⚠️  Helm templates have validation warnings (expected due to templating)"
        }

    - name: Generate Compatibility Report
      if: always()
      run: |
        echo "## Kubernetes ${{ matrix.kubernetes-version }} Compatibility Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Core Manifests**: $(if [ $? -eq 0 ]; then echo '✅ Compatible'; else echo '❌ Issues Found'; fi)" >> $GITHUB_STEP_SUMMARY
        echo "- **Helm Templates**: ⚠️ Partial validation (templating syntax)" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # Go testing
  go-test:
    name: Go Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.25.1'
        cache: true
        cache-dependency-path: setagaya/go.sum

    - name: Setup test database
      run: |
        sudo systemctl start mysql.service
        mysql -e 'CREATE DATABASE setagaya_test;' -uroot -proot

    - name: Run Tests
      run: |
        cd setagaya

        # Verify test mode configuration
        echo "Running tests in SETAGAYA_TEST_MODE..."
        echo "Current directory: $(pwd)"
        echo "Config files available:"
        ls -la config* || echo "No config files in current directory"
        ls -la /config.json || echo "No config file in root"

        # Run tests with coverage
        SETAGAYA_TEST_MODE=true go test -v -coverprofile=coverage.out ./...

        # Verify coverage file was created
        if [ -f coverage.out ]; then
          echo "Coverage file created successfully"
          echo "Coverage summary:"
          go tool cover -func=coverage.out | tail -1
          echo "Coverage file size: $(wc -l < coverage.out) lines"
        else
          echo "Error: Coverage file not created"
          exit 1
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./setagaya/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Coverage validation
      run: |
        echo "Validating coverage file before upload..."
        if [ -f setagaya/coverage.out ]; then
          echo "Coverage file exists and contains:"
          head -5 setagaya/coverage.out
          echo "..."
          tail -2 setagaya/coverage.out
        else
          echo "Coverage file not found!"
        fi

    - name: Generate coverage report
      run: |
        cd setagaya
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: setagaya/coverage.html

  # Go mod verification
  go-mod-verify:
    name: Go Mod Verification
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.25.1'
        cache: true
        cache-dependency-path: setagaya/go.sum

    - name: Verify go mod
      run: |
        cd setagaya
        go mod verify
        go mod tidy
        git diff --exit-code go.mod go.sum

  # Dockerfile linting
  dockerfile-lint:
    name: Dockerfile Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v5

    - name: Lint Dockerfiles with Hadolint
      uses: hadolint/hadolint-action@v3.2.0
      with:
        dockerfile: setagaya/Dockerfile
        format: sarif
        output-file: hadolint-api.sarif
        config: .hadolint.yaml
        no-fail: true

    - name: Lint JMeter Dockerfile
      uses: hadolint/hadolint-action@v3.2.0
      with:
        dockerfile: setagaya/Dockerfile.engines.jmeter
        format: sarif
        output-file: hadolint-jmeter.sarif
        config: .hadolint.yaml
        no-fail: true

    - name: Lint Controller Dockerfile
      uses: hadolint/hadolint-action@v3.2.0
      with:
        dockerfile: setagaya/Dockerfile.controller
        format: sarif
        output-file: hadolint-controller.sarif
        config: .hadolint.yaml
        no-fail: true

    - name: Lint Local Storage Dockerfile
      uses: hadolint/hadolint-action@v3.2.0
      with:
        dockerfile: local_storage/Dockerfile
        format: sarif
        output-file: hadolint-storage.sarif
        config: .hadolint.yaml
        no-fail: true

    - name: Lint Grafana Dockerfile
      uses: hadolint/hadolint-action@v3.2.0
      with:
        dockerfile: grafana/Dockerfile
        format: sarif
        output-file: hadolint-grafana.sarif
        config: .hadolint.yaml
        no-fail: true

    - name: Upload Hadolint API results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('hadolint-api.sarif') != ''
      with:
        sarif_file: hadolint-api.sarif
        category: hadolint-api

    - name: Upload Hadolint JMeter results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('hadolint-jmeter.sarif') != ''
      with:
        sarif_file: hadolint-jmeter.sarif
        category: hadolint-jmeter

    - name: Upload Hadolint Controller results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('hadolint-controller.sarif') != ''
      with:
        sarif_file: hadolint-controller.sarif
        category: hadolint-controller

    - name: Upload Hadolint Storage results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('hadolint-storage.sarif') != ''
      with:
        sarif_file: hadolint-storage.sarif
        category: hadolint-storage

    - name: Upload Hadolint Grafana results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('hadolint-grafana.sarif') != ''
      with:
        sarif_file: hadolint-grafana.sarif
        category: hadolint-grafana

  # YAML linting
  yaml-lint:
    name: YAML Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v5

    - name: YAML Lint
      uses: ibiqlik/action-yamllint@v3
      with:
        config_file: .yamllint.yml
        file_or_dir: |
          kubernetes/
          setagaya/install/
          grafana/metrics-dashboard/
          .github/workflows/

  # Shell script linting
  shellcheck:
    name: Shell Script Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v5

    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@2.0.0
      with:
        scandir: './'
        format: gcc
        severity: warning
        check_together: 'yes'
        ignore_paths: |
          node_modules
          .git
          .github
        additional_files: |
          setagaya/build.sh
          setagaya/move_images.sh
          scripts/kubernetes-compatibility.sh

  # JSON linting
  json-lint:
    name: JSON Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v5

    - name: Validate JSON files
      run: |
        find . -name "*.json" -not -path "./node_modules/*" -not -path "./.git/*" -not -path "./.vscode/*" | \
        while read -r file; do
          echo "Validating $file"
          # Skip empty files (like placeholder credential files)
          if [ -s "$file" ]; then
            python3 -m json.tool "$file" > /dev/null
          else
            echo "Skipping empty file: $file"
          fi
        done

  # Documentation checks
  docs-check:
    name: Documentation Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v5

    - name: Check for broken links
      run: |
        # Install markdown-link-check
        npm install -g markdown-link-check

        # Find all markdown files except TECHNICAL_SPECS.md
        find . -name '*.md' \
          -not -path './node_modules/*' \
          -not -path './TECHNICAL_SPECS.md' \
          -exec markdown-link-check '{}' --config .github/markdown-link-check-config.json -q -v \;

    - name: Spell check
      uses: rojopolis/spellcheck-github-actions@0.33.1
      with:
        config_path: .github/spellcheck-settings.yml
        task_name: Markdown

  # Security policy validation
  security-policy:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v5

    - name: Check for security policy
      run: |
        if [ ! -f "SECURITY.md" ]; then
          echo "::warning::SECURITY.md file not found. Consider adding a security policy."
        fi

    - name: Validate GitHub security features
      run: |
        echo "Checking if security features are enabled..."
        # Check if dependency graph is likely enabled (by checking for known vuln files)
        if [ -f ".github/dependabot.yml" ]; then
          echo "✓ Dependabot configuration found"
        else
          echo "::warning::Consider adding .github/dependabot.yml for automated dependency updates"
        fi

  # Code complexity analysis
  complexity-check:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.25.1'
        cache: true
        cache-dependency-path: setagaya/go.sum

    - name: Install gocyclo
      run: go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

    - name: Check cyclomatic complexity
      run: |
        cd setagaya
        gocyclo -over 15 . || echo "::warning::High complexity functions found"

    - name: Install ineffassign
      run: go install github.com/gordonklaus/ineffassign@latest

    - name: Check for ineffectual assignments
      run: |
        cd setagaya
        ineffassign ./...

    - name: Install misspell
      run: go install github.com/client9/misspell/cmd/misspell@latest

    - name: Check for misspellings
      run: |
        misspell -error README.md TECHNICAL_SPECS.md docs/ $(find setagaya/ -type f -name "*.go" -o -name "*.md" -o -name "*.json" -o -name "*.yml" -o -name "*.yaml" | grep -v "/static/")

  # Kubernetes compatibility summary
  kubernetes-compatibility-summary:
    name: Kubernetes Compatibility Summary
    runs-on: ubuntu-latest
    needs: kubernetes-compatibility
    if: always()
    steps:
    - name: Generate Summary Report
      run: |
        echo "# 🚀 Kubernetes Compatibility Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Tested Versions" >> $GITHUB_STEP_SUMMARY
        echo "- Kubernetes 1.21.0 (Minimum supported)" >> $GITHUB_STEP_SUMMARY
        echo "- Kubernetes 1.25.0 (LTS)" >> $GITHUB_STEP_SUMMARY
        echo "- Kubernetes 1.28.0 (Current stable)" >> $GITHUB_STEP_SUMMARY
        echo "- Kubernetes 1.34.0 (Latest)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Results" >> $GITHUB_STEP_SUMMARY
        echo "Check individual job results above for detailed compatibility information." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Production Recommendations" >> $GITHUB_STEP_SUMMARY
        echo "- **Minimum**: Kubernetes 1.21+ (with policy/v1)" >> $GITHUB_STEP_SUMMARY
        echo "- **Recommended**: Kubernetes 1.25+ (LTS support)" >> $GITHUB_STEP_SUMMARY
        echo "- **Optimal**: Kubernetes 1.28+ (latest stable features)" >> $GITHUB_STEP_SUMMARY
