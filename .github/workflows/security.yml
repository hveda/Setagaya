name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1'  # Run weekly on Mondays at 2 AM
  push:
    branches: [ master, main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Advanced security scanning with CodeQL
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'javascript' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
        
    - name: Set up Go (for Go analysis)
      if: matrix.language == 'go'
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.4'
        
    - name: Build Go code (for CodeQL)
      if: matrix.language == 'go'
      run: |
        cd setagaya
        go mod download
        go build ./...
        
    - name: Set up Node.js (for JavaScript analysis)  
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install JavaScript dependencies (for CodeQL)
      if: matrix.language == 'javascript'
      run: |
        cd setagaya
        npm ci
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        
  # Dependency vulnerability scanning
  dependency-review:
    name: Dependency Vulnerability Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: high
        deny-licenses: GPL-2.0, GPL-3.0
        
  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build container image
      run: |
        cd setagaya
        docker build -t setagaya:security-scan .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'setagaya:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  # OWASP ZAP security testing
  security-testing:
    name: OWASP ZAP Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Start application for testing
      run: |
        cd setagaya
        # Start a test instance - adjust as needed for your setup
        docker-compose -f docker-compose.test.yml up -d || echo "No test compose file found"
        
    - name: Wait for application to start
      run: sleep 30
      
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://localhost:8080'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified