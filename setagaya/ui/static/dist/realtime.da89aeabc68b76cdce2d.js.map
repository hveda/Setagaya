{"version":3,"file":"realtime.da89aeabc68b76cdce2d.js","mappings":"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","sources":["webpack://setagaya/./ui/static/js/realtime.js"],"sourcesContent":["// Setagaya Real-time Updates System - Phase 3\n// WebSocket/SSE Integration for Live Status Monitoring\n\n// Real-time Connection Manager\nclass RealtimeManager {\n    constructor() {\n        this.connections = new Map();\n        this.eventSources = new Map();\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 5;\n        this.reconnectDelay = 1000;\n        this.listeners = new Map();\n        this.isOnline = navigator.onLine;\n        \n        this.setupNetworkHandlers();\n        console.log('Real-time manager initialized');\n    }\n\n    setupNetworkHandlers() {\n        window.addEventListener('online', () => {\n            this.isOnline = true;\n            this.reconnectAll();\n        });\n\n        window.addEventListener('offline', () => {\n            this.isOnline = false;\n            this.closeAll();\n        });\n    }\n\n    // Server-Sent Events (SSE) connection for collection monitoring\n    connectToCollectionUpdates(collectionId) {\n        if (!this.isOnline) {\n            console.warn('Cannot connect: offline');\n            return null;\n        }\n\n        const connectionKey = `collection_${collectionId}`;\n        \n        if (this.eventSources.has(connectionKey)) {\n            return this.eventSources.get(connectionKey);\n        }\n\n        const eventSource = new EventSource(`/api/collections/${collectionId}/stream`);\n        \n        eventSource.onopen = () => {\n            console.log(`Connected to collection ${collectionId} updates`);\n            this.reconnectAttempts = 0;\n            this.emit(`collection_${collectionId}_connected`);\n        };\n\n        eventSource.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data);\n                this.emit(`collection_${collectionId}_update`, data);\n            } catch (error) {\n                console.error('Failed to parse collection update:', error);\n            }\n        };\n\n        eventSource.onerror = (error) => {\n            console.error(`Collection ${collectionId} stream error:`, error);\n            this.emit(`collection_${collectionId}_error`, error);\n            \n            if (eventSource.readyState === EventSource.CLOSED) {\n                this.eventSources.delete(connectionKey);\n                this.scheduleReconnect(connectionKey, () => this.connectToCollectionUpdates(collectionId));\n            }\n        };\n\n        // Custom event handlers for different message types\n        eventSource.addEventListener('status', (event) => {\n            const data = JSON.parse(event.data);\n            this.emit(`collection_${collectionId}_status`, data);\n        });\n\n        eventSource.addEventListener('metrics', (event) => {\n            const data = JSON.parse(event.data);\n            this.emit(`collection_${collectionId}_metrics`, data);\n        });\n\n        eventSource.addEventListener('error', (event) => {\n            const data = JSON.parse(event.data);\n            this.emit(`collection_${collectionId}_execution_error`, data);\n        });\n\n        this.eventSources.set(connectionKey, eventSource);\n        return eventSource;\n    }\n\n    // Global system updates stream\n    connectToSystemUpdates() {\n        if (!this.isOnline) {\n            console.warn('Cannot connect: offline');\n            return null;\n        }\n\n        const connectionKey = 'system_updates';\n        \n        if (this.eventSources.has(connectionKey)) {\n            return this.eventSources.get(connectionKey);\n        }\n\n        const eventSource = new EventSource('/api/system/stream');\n        \n        eventSource.onopen = () => {\n            console.log('Connected to system updates');\n            this.reconnectAttempts = 0;\n            this.emit('system_connected');\n        };\n\n        eventSource.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data);\n                this.emit('system_update', data);\n            } catch (error) {\n                console.error('Failed to parse system update:', error);\n            }\n        };\n\n        eventSource.onerror = (error) => {\n            console.error('System stream error:', error);\n            this.emit('system_error', error);\n            \n            if (eventSource.readyState === EventSource.CLOSED) {\n                this.eventSources.delete(connectionKey);\n                this.scheduleReconnect(connectionKey, () => this.connectToSystemUpdates());\n            }\n        };\n\n        this.eventSources.set(connectionKey, eventSource);\n        return eventSource;\n    }\n\n    // Admin updates stream for admin interface\n    connectToAdminUpdates() {\n        if (!window.authManager.hasPermission('system:admin')) {\n            console.warn('Access denied: Admin privileges required');\n            return null;\n        }\n\n        if (!this.isOnline) {\n            console.warn('Cannot connect: offline');\n            return null;\n        }\n\n        const connectionKey = 'admin_updates';\n        \n        if (this.eventSources.has(connectionKey)) {\n            return this.eventSources.get(connectionKey);\n        }\n\n        const eventSource = new EventSource('/api/admin/stream');\n        \n        eventSource.onopen = () => {\n            console.log('Connected to admin updates');\n            this.reconnectAttempts = 0;\n            this.emit('admin_connected');\n        };\n\n        eventSource.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data);\n                this.emit('admin_update', data);\n            } catch (error) {\n                console.error('Failed to parse admin update:', error);\n            }\n        };\n\n        eventSource.addEventListener('user_activity', (event) => {\n            const data = JSON.parse(event.data);\n            this.emit('admin_user_activity', data);\n        });\n\n        eventSource.addEventListener('collection_activity', (event) => {\n            const data = JSON.parse(event.data);\n            this.emit('admin_collection_activity', data);\n        });\n\n        eventSource.onerror = (error) => {\n            console.error('Admin stream error:', error);\n            this.emit('admin_error', error);\n            \n            if (eventSource.readyState === EventSource.CLOSED) {\n                this.eventSources.delete(connectionKey);\n                this.scheduleReconnect(connectionKey, () => this.connectToAdminUpdates());\n            }\n        };\n\n        this.eventSources.set(connectionKey, eventSource);\n        return eventSource;\n    }\n\n    disconnectFromCollection(collectionId) {\n        const connectionKey = `collection_${collectionId}`;\n        const eventSource = this.eventSources.get(connectionKey);\n        \n        if (eventSource) {\n            eventSource.close();\n            this.eventSources.delete(connectionKey);\n            console.log(`Disconnected from collection ${collectionId} updates`);\n        }\n    }\n\n    disconnectFromSystem() {\n        const eventSource = this.eventSources.get('system_updates');\n        if (eventSource) {\n            eventSource.close();\n            this.eventSources.delete('system_updates');\n            console.log('Disconnected from system updates');\n        }\n    }\n\n    disconnectFromAdmin() {\n        const eventSource = this.eventSources.get('admin_updates');\n        if (eventSource) {\n            eventSource.close();\n            this.eventSources.delete('admin_updates');\n            console.log('Disconnected from admin updates');\n        }\n    }\n\n    scheduleReconnect(connectionKey, reconnectFn) {\n        if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n            console.error(`Max reconnection attempts reached for ${connectionKey}`);\n            this.emit(`${connectionKey}_max_retries_exceeded`);\n            return;\n        }\n\n        this.reconnectAttempts++;\n        const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1); // Exponential backoff\n\n        console.log(`Scheduling reconnection attempt ${this.reconnectAttempts} for ${connectionKey} in ${delay}ms`);\n        \n        setTimeout(() => {\n            if (this.isOnline) {\n                console.log(`Attempting to reconnect ${connectionKey}`);\n                reconnectFn();\n            }\n        }, delay);\n    }\n\n    reconnectAll() {\n        console.log('Reconnecting all connections...');\n        // Clear existing connections\n        this.closeAll();\n        \n        // Emit reconnection event so components can re-establish their connections\n        this.emit('reconnect_all');\n    }\n\n    closeAll() {\n        console.log('Closing all real-time connections');\n        \n        for (const [, eventSource] of this.eventSources) {\n            eventSource.close();\n        }\n        \n        this.eventSources.clear();\n        this.connections.clear();\n    }\n\n    // Event system for components to listen to real-time updates\n    on(event, callback) {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set());\n        }\n        this.listeners.get(event).add(callback);\n    }\n\n    off(event, callback) {\n        if (this.listeners.has(event)) {\n            this.listeners.get(event).delete(callback);\n        }\n    }\n\n    emit(event, data = null) {\n        if (this.listeners.has(event)) {\n            for (const callback of this.listeners.get(event)) {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error(`Error in event listener for ${event}:`, error);\n                }\n            }\n        }\n    }\n\n    // Health check for connections\n    getConnectionStatus() {\n        const status = {};\n        \n        for (const [key, eventSource] of this.eventSources) {\n            status[key] = {\n                readyState: eventSource.readyState,\n                url: eventSource.url,\n                isConnected: eventSource.readyState === EventSource.OPEN\n            };\n        }\n        \n        return {\n            isOnline: this.isOnline,\n            reconnectAttempts: this.reconnectAttempts,\n            connections: status\n        };\n    }\n\n    // Cleanup method\n    destroy() {\n        this.closeAll();\n        this.listeners.clear();\n        console.log('Real-time manager destroyed');\n    }\n}\n\n// Real-time Collection Monitor Component\nfunction realtimeCollectionComponent() {\n    return {\n        collectionId: null,\n        status: 'disconnected',\n        metrics: {},\n        errors: [],\n        connectionStatus: 'disconnected',\n        lastUpdate: null,\n        autoReconnect: true,\n\n        init() {\n            this.setupEventListeners();\n            console.log('Real-time collection component initialized');\n        },\n\n        setupEventListeners() {\n            // Collection-specific events\n            window.realtimeManager.on(`collection_${this.collectionId}_connected`, () => {\n                this.connectionStatus = 'connected';\n                this.status = 'monitoring';\n            });\n\n            window.realtimeManager.on(`collection_${this.collectionId}_update`, (data) => {\n                this.handleUpdate(data);\n            });\n\n            window.realtimeManager.on(`collection_${this.collectionId}_status`, (data) => {\n                this.handleStatusUpdate(data);\n            });\n\n            window.realtimeManager.on(`collection_${this.collectionId}_metrics`, (data) => {\n                this.handleMetricsUpdate(data);\n            });\n\n            window.realtimeManager.on(`collection_${this.collectionId}_execution_error`, (data) => {\n                this.handleError(data);\n            });\n\n            window.realtimeManager.on(`collection_${this.collectionId}_error`, (error) => {\n                this.connectionStatus = 'error';\n                this.handleConnectionError(error);\n            });\n\n            // Global reconnection event\n            window.realtimeManager.on('reconnect_all', () => {\n                if (this.autoReconnect && this.collectionId) {\n                    this.connect();\n                }\n            });\n        },\n\n        connect() {\n            if (!this.collectionId) {\n                console.error('Cannot connect: No collection ID specified');\n                return;\n            }\n\n            this.connectionStatus = 'connecting';\n            window.realtimeManager.connectToCollectionUpdates(this.collectionId);\n        },\n\n        disconnect() {\n            if (this.collectionId) {\n                window.realtimeManager.disconnectFromCollection(this.collectionId);\n                this.connectionStatus = 'disconnected';\n                this.status = 'stopped';\n            }\n        },\n\n        handleUpdate(data) {\n            this.lastUpdate = new Date().toISOString();\n            \n            if (data.type === 'status') {\n                this.status = data.status;\n            } else if (data.type === 'metrics') {\n                this.metrics = { ...this.metrics, ...data.metrics };\n            }\n        },\n\n        handleStatusUpdate(data) {\n            this.status = data.status;\n            this.lastUpdate = new Date().toISOString();\n            \n            // Emit event for parent components\n            this.$dispatch('collection-status-changed', {\n                collectionId: this.collectionId,\n                status: data.status,\n                data: data\n            });\n        },\n\n        handleMetricsUpdate(data) {\n            this.metrics = { ...this.metrics, ...data };\n            this.lastUpdate = new Date().toISOString();\n            \n            // Emit event for parent components\n            this.$dispatch('collection-metrics-updated', {\n                collectionId: this.collectionId,\n                metrics: data\n            });\n        },\n\n        handleError(error) {\n            this.errors.push({\n                timestamp: new Date().toISOString(),\n                message: error.message || 'Unknown error',\n                details: error\n            });\n            \n            // Keep only last 10 errors\n            if (this.errors.length > 10) {\n                this.errors = this.errors.slice(-10);\n            }\n        },\n\n        handleConnectionError(error) {\n            console.error('Collection real-time connection error:', error);\n            \n            if (this.autoReconnect) {\n                this.connectionStatus = 'reconnecting';\n            }\n        },\n\n        formatMetric(value, type = 'number') {\n            if (type === 'duration' && typeof value === 'number') {\n                return `${value}ms`;\n            } else if (type === 'percentage' && typeof value === 'number') {\n                return `${value.toFixed(1)}%`;\n            } else if (type === 'number' && typeof value === 'number') {\n                return value.toLocaleString();\n            }\n            return value || 'N/A';\n        },\n\n        getConnectionStatusIcon() {\n            const statusIcons = {\n                'connected': 'fas fa-circle text-success',\n                'connecting': 'fas fa-circle text-warning',\n                'reconnecting': 'fas fa-circle text-warning fa-blink',\n                'disconnected': 'fas fa-circle text-secondary',\n                'error': 'fas fa-circle text-danger'\n            };\n            return statusIcons[this.connectionStatus] || 'fas fa-circle text-secondary';\n        },\n\n        getStatusBadgeClass() {\n            const statusClasses = {\n                'running': 'bg-success',\n                'completed': 'bg-primary',\n                'failed': 'bg-danger',\n                'pending': 'bg-warning',\n                'stopped': 'bg-secondary',\n                'monitoring': 'bg-info'\n            };\n            return statusClasses[this.status] || 'bg-secondary';\n        }\n    };\n}\n\n// Real-time System Monitor Component\nfunction realtimeSystemComponent() {\n    return {\n        systemMetrics: {},\n        isConnected: false,\n        lastUpdate: null,\n        connectionErrors: 0,\n\n        init() {\n            this.connect();\n            this.setupEventListeners();\n            console.log('Real-time system component initialized');\n        },\n\n        setupEventListeners() {\n            window.realtimeManager.on('system_connected', () => {\n                this.isConnected = true;\n                this.connectionErrors = 0;\n            });\n\n            window.realtimeManager.on('system_update', (data) => {\n                this.handleSystemUpdate(data);\n            });\n\n            window.realtimeManager.on('system_error', () => {\n                this.isConnected = false;\n                this.connectionErrors++;\n            });\n\n            window.realtimeManager.on('reconnect_all', () => {\n                this.connect();\n            });\n        },\n\n        connect() {\n            window.realtimeManager.connectToSystemUpdates();\n        },\n\n        disconnect() {\n            window.realtimeManager.disconnectFromSystem();\n            this.isConnected = false;\n        },\n\n        handleSystemUpdate(data) {\n            this.systemMetrics = { ...this.systemMetrics, ...data };\n            this.lastUpdate = new Date().toISOString();\n        }\n    };\n}\n\n// Initialize global real-time manager\nwindow.realtimeManager = new RealtimeManager();\n\n// Register components globally\nwindow.realtimeCollectionComponent = realtimeCollectionComponent;\nwindow.realtimeSystemComponent = realtimeSystemComponent;\n\n// Cleanup on page unload\nwindow.addEventListener('beforeunload', () => {\n    if (window.realtimeManager) {\n        window.realtimeManager.destroy();\n    }\n});"],"names":["RealtimeManager","_classCallCheck","this","connections","Map","eventSources","reconnectAttempts","maxReconnectAttempts","reconnectDelay","listeners","isOnline","navigator","onLine","setupNetworkHandlers","console","log","key","value","_this","window","addEventListener","reconnectAll","closeAll","collectionId","_this2","warn","connectionKey","concat","has","get","eventSource","EventSource","onopen","emit","onmessage","event","data","JSON","parse","error","onerror","readyState","CLOSED","scheduleReconnect","connectToCollectionUpdates","set","_this3","connectToSystemUpdates","_this4","authManager","hasPermission","connectToAdminUpdates","close","reconnectFn","_this5","delay","Math","pow","setTimeout","_step","_iterator","_createForOfIteratorHelper","s","n","done","_slicedToArray","err","e","f","clear","callback","Set","add","arguments","length","undefined","_step2","_iterator2","_step3","status","_iterator3","_step3$value","url","isConnected","OPEN","realtimeManager","realtimeCollectionComponent","metrics","errors","connectionStatus","lastUpdate","autoReconnect","init","setupEventListeners","_this6","on","handleUpdate","handleStatusUpdate","handleMetricsUpdate","handleError","handleConnectionError","connect","disconnect","disconnectFromCollection","Date","toISOString","type","_objectSpread","$dispatch","push","timestamp","message","details","slice","formatMetric","toFixed","toLocaleString","getConnectionStatusIcon","getStatusBadgeClass","realtimeSystemComponent","systemMetrics","connectionErrors","_this7","handleSystemUpdate","disconnectFromSystem","destroy"],"sourceRoot":""}